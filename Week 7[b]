#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_NODES 100

struct Queue {
    int items[MAX_NODES];
    int front, rear;
};

void initQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

bool isQueueEmpty(struct Queue* q) {
    return (q->front == -1);
}

void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_NODES - 1)
        printf("Queue Overflow\n");
    else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

int dequeue(struct Queue* q) {
    if (isQueueEmpty(q)) {
        printf("Queue Underflow\n");
        return -1;
    } else {
        int item = q->items[q->front];
        if (q->front == q->rear) {
            q->front = q->rear = -1;
        } else {
            q->front++;
        }
        return item;
    }
}

void BFS(int adjMatrix[MAX_NODES][MAX_NODES], int numVertices, int startVertex) {
    struct Queue q;
    initQueue(&q);
    
    bool visited[MAX_NODES] = {false};
    visited[startVertex] = true;
    
    enqueue(&q, startVertex);
    
    printf("BFS Traversal starting from vertex %d: ", startVertex);
    
    while (!isQueueEmpty(&q)) {
        int currentVertex = dequeue(&q);
        printf("%d ", currentVertex);
        
        for (int i = 0; i < numVertices; i++) {
            if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

int main() {
    int adjMatrix[MAX_NODES][MAX_NODES];
    int numVertices, startVertex;
    
    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);
    
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }
    
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);
    
    BFS(adjMatrix, numVertices, startVertex);
    
    return 0;
}

Output:
Enter the number of vertices: 5
Enter the adjacency matrix:
0 1 0 0 1
1 0 1 0 1
0 1 0 1 0
1 0 0 1 1
1 0 0 0 1
Enter the starting vertex for BFS: 2
BFS Traversal starting from vertex 2: 2 1 3 0 4 

