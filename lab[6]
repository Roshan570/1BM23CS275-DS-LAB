#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node *prev;
    struct Node *next;
};


struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}


void insertAtBeginning(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
    } else {
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
    }
}


void insertBefore(struct Node** head, int newValue, int targetValue) {
    struct Node* temp = *head;
    while (temp != NULL && temp->data != targetValue) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found.\n", targetValue);
        return;
    }

    struct Node* newNode = createNode(newValue);
    newNode->prev = temp->prev;
    newNode->next = temp;

    if (temp->prev != NULL) {
        temp->prev->next = newNode;
    } else {
        *head = newNode;
    }
    temp->prev = newNode;
}


void deleteNode(struct Node** head, int value) {
    struct Node* temp = *head;
    while (temp != NULL && temp->data != value) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Node with value %d not found.\n", value);
        return;
    }

    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    } else {
        *head = temp->next;
    }

    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }

    free(temp);
    printf("Node with value %d deleted.\n", value);
}


void displayList(struct Node* head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }

    struct Node* temp = head;
    printf("Doubly Linked List: ");
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    int choice, value, targetValue;

    while (1) {
        printf("\nDoubly Linked List Operations:\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert Before a Node\n");
        printf("3. Delete a Node\n");
        printf("4. Display List\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at the beginning: ");
                scanf("%d", &value);
                insertAtBeginning(&head, value);
                break;
            case 2:
                printf("Enter target value before which to insert: ");
                scanf("%d", &targetValue);
                printf("Enter new value to insert: ");
                scanf("%d", &value);
                insertBefore(&head, value, targetValue);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(&head, value);
                break;
            case 4:
                displayList(head);
                break;
            case 5:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}
OUTPUT:
Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 1
Enter value to insert at the beginning: 10

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 1
Enter value to insert at the beginning: 20

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 4
Doubly Linked List: 20 <-> 10 <-> NULL

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 2
Enter target value before which to insert: 10
Enter new value to insert: 15

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 4
Doubly Linked List: 20 <-> 15 <-> 10 <-> NULL

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 3
Enter value to delete: 15
Node with value 15 deleted.

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 4
Doubly Linked List: 20 <-> 10 <-> NULL

Doubly Linked List Operations:
1. Insert at Beginning
2. Insert Before a Node
3. Delete a Node
4. Display List
5. Exit
Enter your choice: 5


