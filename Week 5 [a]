#include<stdio.h>
#include<stdlib.h>
#include<stddef.h>

struct Node {
    int data;
    struct Node *next;
};
struct Node *top1 = NULL, *top2 = NULL;

void sortLinkedList(struct Node *top) {
    struct Node *ptr, *pre_ptr;
    int temp;

    if (top == NULL || top->next == NULL) {
        return;
    }
    for (ptr = top; ptr != NULL; ptr = ptr->next) {
        for (pre_ptr = top; pre_ptr->next != NULL; pre_ptr = pre_ptr->next) {
            if (pre_ptr->data > pre_ptr->next->data) {
                temp = pre_ptr->data;
                pre_ptr->data = pre_ptr->next->data;
                pre_ptr->next->data = temp;
            }
        }
    }
}

struct Node* reverseLinkedList(struct Node *top) {
    struct Node *ptr = top, *pre_ptr = NULL, *next_ptr = NULL;

    while (ptr != NULL) {
        next_ptr = ptr->next;
        ptr->next = pre_ptr;
        pre_ptr = ptr;
        ptr = next_ptr;
    }
    return pre_ptr;
}

struct Node* concatenateLinkedLists(struct Node *top1, struct Node *top2) {
    struct Node *ptr = top1;

    if (top1 == NULL) return top2;
    if (top2 == NULL) return top1;

    while (ptr->next != NULL) {
        ptr = ptr->next;
    }

    ptr->next = top2;
    return top1;
}

struct Node* createNode(int data) {
    struct Node *newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void displayList(struct Node *top) {
    struct Node *ptr = top;
    while (ptr != NULL) {
        printf("%d -> ", ptr->data);
        ptr = ptr->next;
    }
    printf("NULL\n");
}

void main() {
    top1 = createNode(20);
    top1->next = createNode(30);
    top1->next->next = createNode(40);

    top2 = createNode(50);
    top2->next = createNode(60);

    printf("Original List 1: ");
    displayList(top1);

    printf("Original List 2: ");
    displayList(top2);

    sortLinkedList(top1);
    printf("Sorted List 1: ");
    displayList(top1);

    top1 = reverseLinkedList(top1);
    printf("Reversed List 1: ");
    displayList(top1);

    struct Node *mergedList = concatenateLinkedLists(top1, top2);
    printf("Concatenated List: ");
    displayList(mergedList);
}

OUTPUT:-
Original List 1: 20 -> 30 -> 40 -> NULL
Original List 2: 50 -> 60 -> NULL

Sorted List 1: 20 -> 30 -> 40 -> NULL
Reversed List 1: 40 -> 30 -> 20 -> NULL
Concatenated List: 40 -> 30 -> 20 -> 50 -> 60 -> NULL
